#!/bin/bash

# Adicionado para sair em caso de erro e falhar em pipelines
set -eo pipefail

COMPOSE_DIR="/app/docker"
LOG_DIR="/var/log/docker-updater"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/$(date +'%Y-%m-%d').log"

DISCORD_WEBHOOK="SUA URL DISCORD AQUI"

log() {
    # Usando printf para maior portabilidade e controle de formato
    printf '%s - %s\n' "$(date +'%F %T')" "$1" | tee -a "$LOG_FILE"
}

send_discord() {
    local message="$1"
    # Adicionado tratamento de erro b√°sico para o curl
    if ! curl -s -f -H "Content-Type: application/json" \
         -X POST \
         -d "$(jq -nc --arg content "$message" '{content: $content}')" \
         "$DISCORD_WEBHOOK" > /dev/null; then
        log "‚ùå Falha ao enviar notifica√ß√£o para o Discord."
    fi
}

log "üîÑ Iniciando verifica√ß√£o de atualiza√ß√µes de containers Docker..."

# Inicializa arrays fora do loop
UPDATED_CONTAINERS=()
ERRORS=()

# Usa process substitution para evitar subshell no loop while
while IFS= read -r COMPOSE_FILE; do
    # Usa pushd/popd para gerenciar diret√≥rios de forma mais segura
    pushd "$(dirname "$COMPOSE_FILE")" > /dev/null || { log "‚ùå Falha ao acessar $(dirname "$COMPOSE_FILE")"; ERRORS+=("Erro ao acessar $(dirname "$COMPOSE_FILE")"); continue; }
    COMPOSE_PATH=$(pwd) # Pega o caminho absoluto ap√≥s entrar no diret√≥rio

    log "üìÅ Verificando compose em: $COMPOSE_PATH"

    log "üì• Fazendo pull das imagens..."
    # Captura a sa√≠da e o status de sa√≠da do pull
    if OUTPUT=$(docker compose pull 2>&1); then
        log "Resultado do pull para $COMPOSE_PATH: Sucesso (verificar logs para detalhes)"
        echo "$OUTPUT" >> "$LOG_FILE"
    else
        pull_exit_code=$?
        log "‚ùå Falha no pull para $COMPOSE_PATH (C√≥digo de sa√≠da: $pull_exit_code)"
        echo "$OUTPUT" >> "$LOG_FILE"
        ERRORS+=("Erro no pull em $COMPOSE_PATH")
        popd > /dev/null # Garante o retorno ao diret√≥rio anterior em caso de falha no pull
        continue # Pula para o pr√≥ximo arquivo compose
    fi

    # Verifica se houve download de novas imagens
    if echo "$OUTPUT" | grep -q -E 'Pull complete|Downloaded newer image|Newer image'; then # Ajustado grep para cobrir mais casos
        log "üîÑ Atualiza√ß√µes encontradas para $COMPOSE_PATH, subindo novos containers com --force-recreate..."
        # Captura a sa√≠da e o status de sa√≠da do up
        if UP_OUTPUT=$(docker compose up -d --remove-orphans --force-recreate 2>&1); then
            UPDATED_CONTAINERS+=("$COMPOSE_PATH")
            log "‚úÖ Atualizado com sucesso: $COMPOSE_PATH"
            echo "$UP_OUTPUT" >> "$LOG_FILE"
        else
            up_exit_code=$?
            ERRORS+=("Erro ao atualizar $COMPOSE_PATH (C√≥digo de sa√≠da: $up_exit_code)")
            log "‚ùå Falha ao atualizar: $COMPOSE_PATH (C√≥digo de sa√≠da: $up_exit_code)"
            echo "$UP_OUTPUT" >> "$LOG_FILE"
        fi
    else
        log "‚úÖ Nenhuma atualiza√ß√£o encontrada para: $COMPOSE_PATH"
    fi

    popd > /dev/null # Retorna ao diret√≥rio anterior

done < <(find "$COMPOSE_DIR" -type f \( -name "docker-compose.yml" -o -name "docker-compose.yaml" \))

log "üßπ Limpando imagens n√£o utilizadas..."
# Adicionado tratamento de erro para prune
if ! docker image prune -af >> "$LOG_FILE" 2>&1; then
    log "‚ö†Ô∏è Erro ao limpar imagens n√£o utilizadas."
    ERRORS+=("Erro durante docker image prune -af")
fi

# Verifica e envia notifica√ß√µes
if [ ${#UPDATED_CONTAINERS[@]} -gt 0 ]; then
    # Usando mapfile/readarray para construir a mensagem de forma mais segura (requer Bash 4+)
    mapfile -t updated_list < <(printf '%s\n' "${UPDATED_CONTAINERS[@]}")
    msg="üöÄ Atualiza√ß√µes aplicadas nos seguintes composes:\n$(printf '* %s\n' "${updated_list[@]}")"
    log "üì£ Enviando notifica√ß√£o de sucesso..."
    send_discord "$msg"
fi

if [ ${#ERRORS[@]} -gt 0 ]; then
    mapfile -t error_list < <(printf '%s\n' "${ERRORS[@]}")
    msg="‚ö†Ô∏è Erros durante atualiza√ß√£o:\n$(printf '* %s\n' "${error_list[@]}")"
    log "üì£ Enviando notifica√ß√£o de erro..."
    send_discord "$msg"
fi

log "‚úÖ Script finalizado."
